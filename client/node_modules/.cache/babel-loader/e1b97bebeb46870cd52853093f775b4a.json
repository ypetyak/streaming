{"ast":null,"code":"import _classCallCheck from \"/Users/ypetyak/Desktop/coding/ReactWorkspace/stream/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ypetyak/Desktop/coding/ReactWorkspace/stream/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ypetyak/Desktop/coding/ReactWorkspace/stream/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ypetyak/Desktop/coding/ReactWorkspace/stream/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ypetyak/Desktop/coding/ReactWorkspace/stream/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/ypetyak/Desktop/coding/ReactWorkspace/stream/client/src/components/GoogleAuth.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { signIn, signOut } from '../actions';\n\nvar GoogleAuth =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(GoogleAuth, _React$Component);\n\n  function GoogleAuth() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, GoogleAuth);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(GoogleAuth)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.onAuthChange = function (isSignedIn) {\n      if (isSignedIn) {\n        _this.props.signIn(_this.auth.currentUser.get().getId());\n      } else {\n        _this.props.signOut();\n      }\n    };\n\n    _this.onSignInClick = function () {\n      _this.auth.signIn();\n    };\n\n    _this.onSignOutClick = function () {\n      _this.auth.signOut();\n    };\n\n    return _this;\n  }\n\n  _createClass(GoogleAuth, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // becouse we can access gapi in the browser console\n      window.gapi.load('client:auth2', function () {\n        // now we need to start our OAuth\n        // it will be called only after our client have successfully\n        // downladed into gapi (callback function)\n        window.gapi.client.init({\n          clientId: \"770556724899-jrh9mpmfc93plkm5r2o939m45hip904r.apps.googleusercontent.com\",\n          scope: 'email'\n        }).then(function () {\n          _this2.auth = window.gapi.auth2.getAuthInstance();\n\n          _this2.onAuthChange(_this2.auth.isSignedIn.get());\n\n          _this2.auth.isSignedIn.listen(_this2.onAuthChange);\n        });\n      });\n    } // becouse componentDidMount loads itself at the begining, if\n    // changes are made to component they won't be reflected until\n    // we refresh the page, so we have to trigger change manually\n\n  }, {\n    key: \"renderAuthButton\",\n    value: function renderAuthButton() {\n      if (this.props.isSignedIn === null) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }, \"I don't know if you are signed in.\");\n      } else if (this.props.isSignedIn) {\n        return React.createElement(\"button\", {\n          onClick: this.onSignOutClick,\n          className: \"ui red google button\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          className: \"google icon\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        }), \"Sign Out\");\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          onClick: this.onSignInClick,\n          className: \"ui red google button\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          className: \"google icon\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        }), \"Sign In\"));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, this.renderAuthButton());\n    }\n  }]);\n\n  return GoogleAuth;\n}(React.Component);\n\n;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    isSignedIn: state.auth.isSignedIn\n  };\n};\n\nexport default connect(mapStateToProps, {\n  signIn: signIn,\n  signOut: signOut\n})(GoogleAuth);","map":{"version":3,"sources":["/Users/ypetyak/Desktop/coding/ReactWorkspace/stream/client/src/components/GoogleAuth.js"],"names":["React","connect","signIn","signOut","GoogleAuth","onAuthChange","isSignedIn","props","auth","currentUser","get","getId","onSignInClick","onSignOutClick","window","gapi","load","client","init","clientId","scope","then","auth2","getAuthInstance","listen","renderAuthButton","Component","mapStateToProps","state"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,MAAT,EAAiBC,OAAjB,QAAgC,YAAhC;;IAEMC,U;;;;;;;;;;;;;;;;;;UAsBFC,Y,GAAe,UAACC,UAAD,EAAgB;AAC3B,UAAIA,UAAJ,EAAgB;AACZ,cAAKC,KAAL,CAAWL,MAAX,CAAkB,MAAKM,IAAL,CAAUC,WAAV,CAAsBC,GAAtB,GAA4BC,KAA5B,EAAlB;AACH,OAFD,MAEO;AACH,cAAKJ,KAAL,CAAWJ,OAAX;AACH;AACJ,K;;UAEDS,a,GAAgB,YAAM;AAClB,YAAKJ,IAAL,CAAUN,MAAV;AACH,K;;UAEDW,c,GAAiB,YAAM;AACnB,YAAKL,IAAL,CAAUL,OAAV;AACH,K;;;;;;;wCAlCmB;AAAA;;AAChB;AACAW,MAAAA,MAAM,CAACC,IAAP,CAAYC,IAAZ,CAAiB,cAAjB,EAAiC,YAAM;AACnC;AACA;AACA;AACAF,QAAAA,MAAM,CAACC,IAAP,CAAYE,MAAZ,CAAmBC,IAAnB,CAAwB;AACpBC,UAAAA,QAAQ,EAAE,0EADU;AAEpBC,UAAAA,KAAK,EAAE;AAFa,SAAxB,EAGGC,IAHH,CAGQ,YAAM;AACV,UAAA,MAAI,CAACb,IAAL,GAAYM,MAAM,CAACC,IAAP,CAAYO,KAAZ,CAAkBC,eAAlB,EAAZ;;AACA,UAAA,MAAI,CAAClB,YAAL,CAAkB,MAAI,CAACG,IAAL,CAAUF,UAAV,CAAqBI,GAArB,EAAlB;;AACA,UAAA,MAAI,CAACF,IAAL,CAAUF,UAAV,CAAqBkB,MAArB,CAA4B,MAAI,CAACnB,YAAjC;AACH,SAPD;AAQH,OAZD;AAaH,K,CAED;AACA;AACA;;;;uCAiBmB;AACf,UAAI,KAAKE,KAAL,CAAWD,UAAX,KAA0B,IAA9B,EAAoC;AAChC,eACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDADJ;AAKH,OAND,MAMO,IAAI,KAAKC,KAAL,CAAWD,UAAf,EAA2B;AAC9B,eACI;AAAS,UAAA,OAAO,EAAE,KAAKO,cAAvB;AAAuC,UAAA,SAAS,EAAC,sBAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAG,UAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,aADJ;AAMH,OAPM,MAOA;AACH,eACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAQ,UAAA,OAAO,EAAE,KAAKD,aAAtB;AAAqC,UAAA,SAAS,EAAC,sBAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAG,UAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,YADJ,CADJ;AAQH;AACJ;;;6BAEQ;AACL,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKa,gBAAL,EADL,CADJ;AAKH;;;;EAtEoBzB,KAAK,CAAC0B,S;;AAuE9B;;AAED,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAW;AAC/B,SAAO;AAAEtB,IAAAA,UAAU,EAAEsB,KAAK,CAACpB,IAAN,CAAWF;AAAzB,GAAP;AACH,CAFD;;AAIA,eAAeL,OAAO,CAAC0B,eAAD,EAAkB;AAAEzB,EAAAA,MAAM,EAANA,MAAF;AAAUC,EAAAA,OAAO,EAAPA;AAAV,CAAlB,CAAP,CAA8CC,UAA9C,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { signIn, signOut } from '../actions'\n\nclass GoogleAuth extends React.Component{\n\n    componentDidMount() {\n        // becouse we can access gapi in the browser console\n        window.gapi.load('client:auth2', () => {\n            // now we need to start our OAuth\n            // it will be called only after our client have successfully\n            // downladed into gapi (callback function)\n            window.gapi.client.init({\n                clientId: \"770556724899-jrh9mpmfc93plkm5r2o939m45hip904r.apps.googleusercontent.com\",\n                scope: 'email'\n            }).then(() => {\n                this.auth = window.gapi.auth2.getAuthInstance();\n                this.onAuthChange(this.auth.isSignedIn.get())\n                this.auth.isSignedIn.listen(this.onAuthChange)\n            })\n        })\n    }\n\n    // becouse componentDidMount loads itself at the begining, if\n    // changes are made to component they won't be reflected until\n    // we refresh the page, so we have to trigger change manually\n    onAuthChange = (isSignedIn) => {\n        if (isSignedIn) {\n            this.props.signIn(this.auth.currentUser.get().getId());\n        } else {\n            this.props.signOut();\n        }\n    }\n\n    onSignInClick = () => {\n        this.auth.signIn()\n    }\n\n    onSignOutClick = () => {\n        this.auth.signOut()\n    }\n\n    renderAuthButton() {\n        if (this.props.isSignedIn === null) {\n            return (\n                <div>\n                    I don't know if you are signed in.\n                </div>\n            )\n        } else if (this.props.isSignedIn) {\n            return (\n                <button  onClick={this.onSignOutClick} className=\"ui red google button\">\n                    <i className=\"google icon\" />\n                    Sign Out\n                </button>\n            )\n        } else {\n            return (\n                <div>\n                    <button onClick={this.onSignInClick} className=\"ui red google button\">\n                        <i className=\"google icon\" />\n                        Sign In\n                    </button>\n                </div>\n            )\n        }\n    }\n\n    render() {\n        return(\n            <div>\n                {this.renderAuthButton()}\n            </div>\n        )\n    }\n};\n\nconst mapStateToProps = (state) => {\n    return { isSignedIn: state.auth.isSignedIn }\n}\n\nexport default connect(mapStateToProps, { signIn, signOut })(GoogleAuth);\n"]},"metadata":{},"sourceType":"module"}