{"ast":null,"code":"import _classCallCheck from \"/Users/ypetyak/Desktop/coding/ReactWorkspace/stream/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ypetyak/Desktop/coding/ReactWorkspace/stream/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ypetyak/Desktop/coding/ReactWorkspace/stream/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ypetyak/Desktop/coding/ReactWorkspace/stream/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ypetyak/Desktop/coding/ReactWorkspace/stream/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/ypetyak/Desktop/coding/ReactWorkspace/stream/client/src/components/streams/StreamForm.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form'; // here Field is a component (will be shown on the screen) and reduxForm is a function\n\nvar StreamForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StreamForm, _React$Component);\n\n  function StreamForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, StreamForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StreamForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.renderError = function (meta) {\n      if (meta.touched && meta.error) {\n        return React.createElement(\"div\", {\n          className: \"ui error message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 10\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 11\n          },\n          __self: this\n        }, meta.error));\n      }\n    };\n\n    _this.renderInput = function (formProps) {\n      var className = \"field \".concat(formProps.meta.error && formProps.meta.touched ? 'error' : '');\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, \" \", formProps.label, \" \"), React.createElement(\"input\", Object.assign({}, formProps.input, {\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      })), _this.renderError(formProps.meta));\n    };\n\n    _this.onSubmit = function (formValues) {\n      _this.props.onSubmit(formValues);\n    };\n\n    return _this;\n  }\n\n  _createClass(StreamForm, [{\n    key: \"render\",\n    value: function render() {\n      // console.log(\"Props in StreamCreate\", this.props);\n      return React.createElement(\"form\", {\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        className: \"ui form error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(Field, {\n        name: \"title\",\n        component: this.renderInput,\n        label: \"Enter Title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"description\",\n        component: this.renderInput,\n        label: \"Enter Description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"ui button primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, \" Submit \"));\n    }\n  }]);\n\n  return StreamForm;\n}(React.Component);\n\nvar validate = function validate(formValues) {\n  var errors = {};\n\n  if (!formValues.title) {\n    errors.title = \"You must enter a title\";\n  }\n\n  if (!formValues.description) {\n    errors.description = \"You must enter a description\";\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'streamForm',\n  validate: validate\n})(StreamForm);","map":{"version":3,"sources":["/Users/ypetyak/Desktop/coding/ReactWorkspace/stream/client/src/components/streams/StreamForm.js"],"names":["React","Field","reduxForm","StreamForm","renderError","meta","touched","error","renderInput","formProps","className","label","input","onSubmit","formValues","props","handleSubmit","Component","validate","errors","title","description","form"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC,C,CACA;;IAEMC,U;;;;;;;;;;;;;;;;;;UAEFC,W,GAAc,UAACC,IAAD,EAAU;AACpB,UAAIA,IAAI,CAACC,OAAL,IAAgBD,IAAI,CAACE,KAAzB,EAAgC;AAC5B,eACI;AAAK,UAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACKF,IAAI,CAACE,KADV,CADJ,CADJ;AAOH;AAEJ,K;;UAEDC,W,GAAc,UAACC,SAAD,EAAe;AACzB,UAAMC,SAAS,mBAAYD,SAAS,CAACJ,IAAV,CAAeE,KAAf,IAAwBE,SAAS,CAACJ,IAAV,CAAeC,OAAvC,GAAiD,OAAjD,GAA2D,EAAvE,CAAf;AACA,aACI;AAAK,QAAA,SAAS,EAAEI,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAASD,SAAS,CAACE,KAAnB,MADJ,EAEI,+CACQF,SAAS,CAACG,KADlB;AAEI,QAAA,YAAY,EAAC,KAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFJ,EAMK,MAAKR,WAAL,CAAiBK,SAAS,CAACJ,IAA3B,CANL,CADJ;AAUH,K;;UAEDQ,Q,GAAW,UAAAC,UAAU,EAAI;AACrB,YAAKC,KAAL,CAAWF,QAAX,CAAoBC,UAApB;AACH,K;;;;;;;6BAEQ;AACL;AACA,aACI;AACI,QAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,YAAX,CAAwB,KAAKH,QAA7B,CADd;AAEI,QAAA,SAAS,EAAC,eAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAII,oBAAC,KAAD;AACI,QAAA,IAAI,EAAC,OADT;AAEI,QAAA,SAAS,EAAE,KAAKL,WAFpB;AAGI,QAAA,KAAK,EAAC,aAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,EASI,oBAAC,KAAD;AACI,QAAA,IAAI,EAAC,aADT;AAEI,QAAA,SAAS,EAAE,KAAKA,WAFpB;AAGI,QAAA,KAAK,EAAC,mBAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QATJ,EAcA;AAAQ,QAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAdA,CADJ;AAkBH;;;;EArDoBR,KAAK,CAACiB,S;;AAwD/B,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAJ,UAAU,EAAI;AAC3B,MAAMK,MAAM,GAAG,EAAf;;AAEA,MAAI,CAACL,UAAU,CAACM,KAAhB,EAAuB;AACnBD,IAAAA,MAAM,CAACC,KAAP,GAAe,wBAAf;AACH;;AAED,MAAI,CAACN,UAAU,CAACO,WAAhB,EAA6B;AACzBF,IAAAA,MAAM,CAACE,WAAP,GAAqB,8BAArB;AACH;;AAED,SAAOF,MAAP;AACH,CAZD;;AAcA,eAAejB,SAAS,CAAC;AACrBoB,EAAAA,IAAI,EAAE,YADe;AAErBJ,EAAAA,QAAQ,EAAEA;AAFW,CAAD,CAAT,CAGZf,UAHY,CAAf","sourcesContent":["import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n// here Field is a component (will be shown on the screen) and reduxForm is a function\n\nclass StreamForm extends React.Component {\n\n    renderError = (meta) => {\n        if (meta.touched && meta.error) {\n            return (\n                <div className=\"ui error message\">\n                    <div className=\"header\">\n                        {meta.error}\n                    </div>\n                </div>\n            )\n        }\n\n    }\n\n    renderInput = (formProps) => {\n        const className = `field ${formProps.meta.error && formProps.meta.touched ? 'error' : ''}`\n        return (\n            <div className={className}>\n                <label> {formProps.label} </label>\n                <input\n                    {...formProps.input}\n                    autoComplete=\"off\"\n                />\n                {this.renderError(formProps.meta)}\n            </div>\n        )\n    }\n\n    onSubmit = formValues => {\n        this.props.onSubmit(formValues)\n    }\n\n    render() {\n        // console.log(\"Props in StreamCreate\", this.props);\n        return(\n            <form\n                onSubmit={this.props.handleSubmit(this.onSubmit)}\n                className=\"ui form error\"\n            >\n                <Field\n                    name=\"title\"\n                    component={this.renderInput}\n                    label=\"Enter Title\"\n                />\n                <Field\n                    name=\"description\"\n                    component={this.renderInput}\n                    label=\"Enter Description\"\n                />\n            <button className=\"ui button primary\"> Submit </button>\n            </form>\n        )\n    }\n}\n\nconst validate = formValues => {\n    const errors = {};\n\n    if (!formValues.title) {\n        errors.title = \"You must enter a title\";\n    }\n\n    if (!formValues.description) {\n        errors.description = \"You must enter a description\";\n    }\n\n    return errors;\n}\n\nexport default reduxForm({\n    form: 'streamForm',\n    validate: validate\n})(StreamForm);\n"]},"metadata":{},"sourceType":"module"}